//--------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Wasm.SDK.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//--------------------------------------------------------------------------------------------------

import { getMethodInfo, invokeMethod, IWasmResource, WasmHelper } from "./wasmShared"

interface WasmRunnerCtorArgSet0 extends Record<string, any> {
  baseUri: string
}

type WasmRunnerCtorArgs = WasmRunnerCtorArgSet0;  

export default class WasmRunner implements IWasmResource {
  // ctors
  private static _ctor1Ptr : number;

  // methods
  private static _executeAssemblyPtr : number;
  
  // mandatory
  private static _assemblyPtr : number;
  private static _classPtr : number;
  private gcHandlePtr : number;

  /** @internal */
  get gcHandle(): number {
    return this.gcHandlePtr;
  }

  private static get assemblyPtr(): number { 
    if (!WasmRunner._assemblyPtr){
      WasmRunner._assemblyPtr = BINDING.assembly_load("WasmRunner")
    }

    return WasmRunner._assemblyPtr;
  }

  private static get classPtr() : number {
    if (!WasmRunner._classPtr){
      WasmRunner._classPtr = BINDING.find_class(WasmRunner.assemblyPtr, "WasmRunner", "_WasmRunner")
    }

    return WasmRunner._classPtr;
  }
  private static get ctor1Ptr() : number {
    if (!WasmRunner._ctor1Ptr) {
      WasmRunner._ctor1Ptr = getMethodInfo(WasmRunner.classPtr, "WasmRunner_wctor1", 1);
    }

    return WasmRunner._ctor1Ptr;
  }


  private static get executeAssemblyPtr(): number {
    if (!WasmRunner._executeAssemblyPtr) {
      WasmRunner._executeAssemblyPtr = getMethodInfo(WasmRunner.classPtr, "_ExecuteAssembly", 1);
    }
    
    return WasmRunner._executeAssemblyPtr;
  }

  
  constructor(args: WasmRunnerCtorArgs) {
    BINDING.bindings_lazy_init();

    const keyConstraints = Object.keys(args).map(x => `${x}: ${typeof args[x]}`).join(" | ");
    console.log(keyConstraints);

    switch (keyConstraints) {
      case "baseUri: string": {
        this.gcHandlePtr = invokeMethod(WasmRunner.ctor1Ptr, 0, "s", [args.baseUri]);
        break;
      }
      default: throw new Error("Unsupported constructor definition");
    }
  }

  executeAssembly(assembly: Uint8Array) : void {
    invokeMethod(WasmRunner.executeAssemblyPtr, this.gcHandlePtr, "o", [assembly]);
  }


  free() : void {
    WasmHelper.free(this);
  }
}